/**
 * Generated by orval v6.19.1 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker';
import { rest } from 'msw';

export const getGetMock = () => ({ message: faker.word.sample() });

export const getLoginPostMock = () => ({ user_uuid: faker.word.sample() });

export const getLoginSsoGooglePostMock = () => ({
  user_uuid: faker.word.sample(),
});

export const getLoginSsoApplePostMock = () => ({
  user_uuid: faker.word.sample(),
});

export const getLoginSsoMicrosoftPostMock = () => ({
  user_uuid: faker.word.sample(),
});

export const getLogoutGetMock = () => ({ success: faker.word.sample() });

export const getReleaseCodeAccountPutMock = () => ({
  expiration_date: (() =>
    faker.date.past().toISOString().split('T')[0].replace(/-/g, '/'))(),
  release_code_user_uuid: faker.word.sample(),
  start_date: (() =>
    faker.date.past().toISOString().split('T')[0].replace(/-/g, '/'))(),
});

export const getReleaseCodeAccountPostMock = () => ({
  authentication_key: faker.word.sample(),
  expiration_date: (() =>
    faker.date.past().toISOString().split('T')[0].replace(/-/g, '/'))(),
  release_code_user_uuid: faker.word.sample(),
  start_date: (() =>
    faker.date.past().toISOString().split('T')[0].replace(/-/g, '/'))(),
});

export const getOnetimeCodeOnetimeCodeGetMock = () => ({
  user_uuid: faker.word.sample(),
});

export const getUsersChildrenGetMock = () => ({
  children: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    school_class: {
      class_name: (() => `${faker.number.int({ min: 1, max: 99 })}\u7D44`)(),
      grade: (() => faker.number.int({ min: 1, max: 6 }))(),
    },
    user: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      attendance_no: (() => faker.number.int({ min: 1, max: 99 }))(),
      class_name: (() => `${faker.number.int({ min: 1, max: 99 })}\u7D44`)(),
      grade: (() => faker.number.int({ min: 1, max: 6 }))(),
      last_login_date: (() =>
        faker.date
          .past()
          .toISOString()
          .replace(/\.\d{3}Z$/, ''))(),
      nick_name: faker.word.sample(),
      user_name: faker.word.sample(),
      user_uuid: faker.word.sample(),
    })),
  })),
});

export const getUsersMeGetMock = () => ({
  class_name: (() => `${faker.number.int({ min: 1, max: 99 })}\u7D44`)(),
  grade: (() => faker.number.int({ min: 1, max: 6 }))(),
  last_login_date: (() =>
    faker.date
      .past()
      .toISOString()
      .replace(/\.\d{3}Z$/, ''))(),
  license: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    expiration_date: (() =>
      faker.date.past().toISOString().split('T')[0].replace(/-/g, '/'))(),
    learning_contents: faker.number.int({ min: undefined, max: undefined }),
    path: faker.helpers.arrayElement([faker.word.sample(), {}]),
    status: faker.number.int({ min: undefined, max: undefined }),
  })),
  nick_name: faker.word.sample(),
  preference: {
    profile_icon: faker.number.int({ min: undefined, max: undefined }),
    theme_color: faker.number.int({ min: undefined, max: undefined }),
  },
  school_class: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      class_name: (() => `${faker.number.int({ min: 1, max: 99 })}\u7D44`)(),
      grade: (() => faker.number.int({ min: 1, max: 6 }))(),
    })),
    {},
  ]),
  school_id: faker.word.sample(),
  time_difference_from_utc: faker.number.int({
    min: undefined,
    max: undefined,
  }),
  user: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      attendance_no: (() => faker.number.int({ min: 1, max: 99 }))(),
      class_name: (() => `${faker.number.int({ min: 1, max: 99 })}\u7D44`)(),
      grade: (() => faker.number.int({ min: 1, max: 6 }))(),
      nick_name: faker.word.sample(),
      user_name: faker.word.sample(),
      user_type: (() => faker.helpers.arrayElement([1, 2]))(),
      user_uuid: faker.word.sample(),
    })),
    {},
  ]),
  user_type: (() => faker.helpers.arrayElement([1, 2]))(),
  user_uuid: faker.word.sample(),
});

export const getUsersMeTokenPutMock = () => ({ success: faker.word.sample() });

export const getUsersMeProfilePutMock = () => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  nick_name: faker.word.sample(),
  profile_icon: faker.number.int({ min: undefined, max: undefined }),
});

export const getUsersMeThemeColorPutMock = () => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  theme_color: faker.number.int({ min: undefined, max: undefined }),
});

export const getUsersMePasswordPostMock = () => ({
  success: faker.word.sample(),
});

export const getUsersMePasswordResetPostMock = () => ({
  success: faker.word.sample(),
});

export const getSchoolClassesGetMock = () => ({
  school_class: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    class_name: (() => `${faker.number.int({ min: 1, max: 99 })}\u7D44`)(),
    grade: (() => faker.number.int({ min: 1, max: 6 }))(),
  })),
});

export const getMunicipalitiesGetMock = () => ({
  municipalities: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    municipality_id: faker.number.int({ min: undefined, max: undefined }),
    municipality_name: faker.word.sample(),
  })),
});

export const getMunicipalitiesSchoolsGetMock = () => ({
  school_name: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.word.sample()),
});

export const getNoticesGetMock = () => ({
  notice:
    '<div><a href="/">11/13　　アップデートしました</a></div><div><a href="/">11/13　　アップデートしました</a></div><div><a href="/">11/13　　アップデートしました</a></div><div><a href="/">11/13　　アップデートしました</a></div><div><a href="/">11/13　　アップデートしました</a></div>',
});

export const getMailSendPostMock = () => ({ message: {} });

export const getMailMailSendCodeGetMock = () => ({
  mail_send_code: faker.word.sample(),
});

export const getURLMailResetPasswordUrlSendPostMock = () => ({
  success: faker.word.sample(),
});

export const getToppageChildrenGetMock = () => ({
  graph_data_study_time: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    date: (() =>
      faker.date
        .past()
        .toISOString()
        .replace(/\.\d{3}Z/, '+00:00'))(),
    study_time: (() => faker.number.int({ min: 0, max: 300 }))(),
  })),
  login_calendar: {
    date_data: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      day: faker.number.int({ min: undefined, max: undefined }),
      medal_type: faker.number.int({ min: undefined, max: undefined }),
    })),
    month: faker.number.int({ min: undefined, max: undefined }),
    year: faker.number.int({ min: undefined, max: undefined }),
  },
  notice:
    '<div><a href="/">11/13　　アップデートしました</a></div><div><a href="/">11/13　　アップデートしました</a></div><div><a href="/">11/13　　アップデートしました</a></div><div><a href="/">11/13　　アップデートしました</a></div><div><a href="/">11/13　　アップデートしました</a></div>',
  number_japanese_dictionary: (() => faker.number.int({ min: 0, max: 1e4 }))(),
  number_kanji_dictionary: (() => faker.number.int({ min: 0, max: 1e4 }))(),
  number_kanji_skill: (() => faker.number.int({ min: 0, max: 1e4 }))(),
  preferences: {
    profile_icon: faker.number.int({ min: undefined, max: undefined }),
    theme_color: faker.number.int({ min: undefined, max: undefined }),
  },
  total_number_logins: (() => faker.number.int({ min: 0, max: 1e4 }))(),
  total_study_time: (() => faker.number.int({ min: 0, max: 2e4 }))(),
});

export const getToppageTeachersGetMock = () => ({
  graph_data_study_time: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    date: (() =>
      faker.date.past().toISOString().split('T')[0].replace(/-/g, '/'))(),
    study_time: faker.number.int({ min: undefined, max: undefined }),
  })),
  notice:
    '<div><a href="/">11/13　　アップデートしました</a></div><div><a href="/">11/13　　アップデートしました</a></div><div><a href="/">11/13　　アップデートしました</a></div><div><a href="/">11/13　　アップデートしました</a></div><div><a href="/">11/13　　アップデートしました</a></div>',
  number_cbt: faker.number.int({ min: undefined, max: undefined }),
  number_japanese_dictionary: faker.number.int({
    min: undefined,
    max: undefined,
  }),
  number_kanji_dictionary: faker.number.int({ min: undefined, max: undefined }),
  number_kanji_skill: faker.number.int({ min: undefined, max: undefined }),
  preferences: {
    profile_icon: faker.number.int({ min: undefined, max: undefined }),
    theme_color: faker.number.int({ min: undefined, max: undefined }),
  },
  total_number_logins: faker.number.int({ min: undefined, max: undefined }),
  total_study_time: faker.number.int({ min: undefined, max: undefined }),
});

export const getRomajiSkillLearningHistoriesGetMock = () => ({
  learning_histories: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    average_keystroke_speed: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    average_time_step_1: faker.number.int({ min: undefined, max: undefined }),
    average_time_step_2: faker.number.int({ min: undefined, max: undefined }),
    average_time_step_3: faker.number.int({ min: undefined, max: undefined }),
    average_time_step_4: faker.number.int({ min: undefined, max: undefined }),
    class_name: (() => `${faker.number.int({ min: 1, max: 99 })}\u7D44`)(),
    date: (() =>
      faker.date.past().toISOString().split('T')[0].replace(/-/g, '/'))(),
    grade: (() => faker.number.int({ min: 1, max: 6 }))(),
    total_keystrokes: faker.number.int({ min: undefined, max: undefined }),
    total_number: faker.number.int({ min: undefined, max: undefined }),
    user_uuid: faker.helpers.arrayElement([faker.word.sample(), {}]),
  })),
});

export const getKanjiSkillLearningHistoriesGetMock = () => ({
  category: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    category_grade: (() => faker.number.int({ min: 1, max: 6 }))(),
    category_id: faker.number.int({ min: undefined, max: undefined }),
    category_name: faker.word.sample(),
  })),
  learning_histories: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    daily_data: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      access_data: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        number_studies: faker.number.int({ min: undefined, max: undefined }),
        teaching_unit_name: faker.word.sample(),
      })),
      study_date: (() =>
        faker.date.past().toISOString().split('T')[0].replace(/-/g, '/'))(),
      total_number: faker.number.int({ min: undefined, max: undefined }),
    })),
    school_class: {
      class_name: (() => `${faker.number.int({ min: 1, max: 99 })}\u7D44`)(),
      grade: (() => faker.number.int({ min: 1, max: 6 }))(),
    },
    user_uuid: faker.word.sample(),
  })),
});

export const getKanjiSkillTestLearningHistoriesGetMock = () => ({
  category: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    category_grade: (() => faker.number.int({ min: 1, max: 6 }))(),
    category_id: faker.number.int({ min: undefined, max: undefined }),
    category_name: faker.word.sample(),
  })),
  learning_histories: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    pretest: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      frequency_type: faker.helpers.arrayElement([
        '初回',
        '初回再',
        '直近',
        '直近再',
      ]),
      teaching_units: {
        items: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          item_name: faker.word.sample(),
          result: faker.number.int({ min: undefined, max: undefined }),
        })),
        teaching_unit_name: faker.word.sample(),
      },
      test_date: (() =>
        faker.date.past())(),
//        faker.date.past().toISOString().split('T')[0].replace(/-/g, '/'))(),
      total: faker.number.int({ min: undefined, max: undefined }),
    })),
    school_class: faker.helpers.arrayElement([
      {
        class_name: (() => `${faker.number.int({ min: 1, max: 99 })}\u7D44`)(),
        grade: (() => faker.number.int({ min: 1, max: 6 }))(),
      },
      {},
    ]),
    test: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      frequency_type: faker.helpers.arrayElement([
        '初回',
        '初回再',
        '直近',
        '直近再',
      ]),
      teaching_units: {
        items: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          item_name: faker.word.sample(),
          result: faker.number.int({ min: undefined, max: undefined }),
        })),
        teaching_unit_name: faker.word.sample(),
      },
      test_date: (() =>
        faker.date.past())(),
  //      faker.date.past().toISOString().split('T')[0].replace(/-/g, '/'))(),
      total: faker.number.int({ min: undefined, max: undefined }),
    })),
    user_uuid: faker.helpers.arrayElement([faker.word.sample(), {}]),
  })),
});

export const getKanjiSkillWrittenNewPostMock = () => ({
  success: faker.word.sample(),
});

export const getDictionaryJapaneseLearningHistoriesGetMock = () => ({
  learning_histories: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    active_time: faker.number.int({ min: undefined, max: undefined }),
    last_action_date: (() =>
      faker.date
        .past()
        .toISOString()
        .replace(/\.\d{3}Z/, '+00:00'))(),
    school_class: {
      class_name: (() => `${faker.number.int({ min: 1, max: 99 })}\u7D44`)(),
      grade: (() => faker.number.int({ min: 1, max: 6 }))(),
    },
    total_number_correct: faker.number.int({ min: undefined, max: undefined }),
    total_number_labels: faker.number.int({ min: undefined, max: undefined }),
    total_number_medals: faker.number.int({ min: undefined, max: undefined }),
    total_number_my_dictionary: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    total_number_word: faker.number.int({ min: undefined, max: undefined }),
    total_number_word_quiz: faker.number.int({
      min: undefined,
      max: undefined,
    }),
    user_uuid: faker.helpers.arrayElement([faker.word.sample(), {}]),
  })),
  words_looked_up_random: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    rank: faker.number.int({ min: undefined, max: undefined }),
    words: faker.word.sample(),
  })),
  words_looked_up_ranking: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    rank: faker.number.int({ min: undefined, max: undefined }),
    words: faker.word.sample(),
  })),
});

export const getDictionaryKanjiLearningHistoriesGetMock = () => ({
  learning_histories: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    active_time: faker.number.int({ min: undefined, max: undefined }),
    last_action_date: (() =>
      faker.date
        .past()
        .toISOString()
        .replace(/\.\d{3}Z/, '+00:00'))(),
    school_class: {
      class_name: (() => `${faker.number.int({ min: 1, max: 99 })}\u7D44`)(),
      grade: (() => faker.number.int({ min: 1, max: 6 }))(),
    },
    total_number_labels: faker.number.int({ min: undefined, max: undefined }),
    total_number_medals: faker.number.int({ min: undefined, max: undefined }),
    total_number_word: faker.number.int({ min: undefined, max: undefined }),
    user_uuid: faker.word.sample(),
  })),
});

export const getWordsLookedUpRankingGetMock = () => ({
  first: faker.word.sample(),
  second: faker.word.sample(),
  third: faker.word.sample(),
});

export const getWordsLookedUpRandomGetMock = () => ({
  words1: { researchers: faker.word.sample(), words: faker.word.sample() },
  words2: { researchers: faker.word.sample(), words: faker.word.sample() },
  words3: { researchers: faker.word.sample(), words: faker.word.sample() },
  words4: { researchers: faker.word.sample(), words: faker.word.sample() },
  words5: { researchers: faker.word.sample(), words: faker.word.sample() },
  words6: { researchers: faker.word.sample(), words: faker.word.sample() },
});

export const getCBTCbtCategoriesGetMock = () => ({
  cbt_categories: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    cbt_category_grade: (() => faker.number.int({ min: 1, max: 6 }))(),
    cbt_category_id: faker.number.int({ min: undefined, max: undefined }),
    cbt_category_name: faker.word.sample(),
  })),
});

export const getFastAPIMSW = () => [
  rest.get('*/', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetMock()),
    );
  }),
  rest.post('*/login', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getLoginPostMock()),
    );
  }),
  rest.post('*/login/sso/google', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getLoginSsoGooglePostMock()),
    );
  }),
  rest.post('*/login/sso/apple', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getLoginSsoApplePostMock()),
    );
  }),
  rest.post('*/login/sso/microsoft', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getLoginSsoMicrosoftPostMock()),
    );
  }),
  rest.get('*/logout', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getLogoutGetMock()),
    );
  }),
  rest.put('*/release-code/account', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getReleaseCodeAccountPutMock()),
    );
  }),
  rest.post('*/release-code/account', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getReleaseCodeAccountPostMock()),
    );
  }),
  rest.get('*/onetime-code/:onetimeCode', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getOnetimeCodeOnetimeCodeGetMock()),
    );
  }),
  rest.get('*/users/children', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUsersChildrenGetMock()),
    );
  }),
  rest.get('*/users/me', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUsersMeGetMock()),
    );
  }),
  rest.put('*/users/me/token', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUsersMeTokenPutMock()),
    );
  }),
  rest.put('*/users/me/profile', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUsersMeProfilePutMock()),
    );
  }),
  rest.put('*/users/me/theme-color', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUsersMeThemeColorPutMock()),
    );
  }),
  rest.post('*/users/me/password', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUsersMePasswordPostMock()),
    );
  }),
  rest.post('*/users/me/password/reset', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUsersMePasswordResetPostMock()),
    );
  }),
  rest.get('*/school/classes', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getSchoolClassesGetMock()),
    );
  }),
  rest.get('*/municipalities', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getMunicipalitiesGetMock()),
    );
  }),
  rest.get('*/municipalities/schools', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getMunicipalitiesSchoolsGetMock()),
    );
  }),
  rest.get('*/notices', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getNoticesGetMock()),
    );
  }),
  rest.post('*/mail/send', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getMailSendPostMock()),
    );
  }),
  rest.get('*/mail/mail-send-code', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getMailMailSendCodeGetMock()),
    );
  }),
  rest.post('*/mail/reset-password-url/send', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getURLMailResetPasswordUrlSendPostMock()),
    );
  }),
  rest.get('*/toppage/children', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getToppageChildrenGetMock()),
    );
  }),
  rest.get('*/toppage/teachers', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getToppageTeachersGetMock()),
    );
  }),
  rest.get('*/romaji-skill/learning-histories', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getRomajiSkillLearningHistoriesGetMock()),
    );
  }),
  rest.get('*/romaji-skill/learning-histories/csv', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/kanji-skill/learning-histories', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getKanjiSkillLearningHistoriesGetMock()),
    );
  }),
  rest.get('*/kanji-skill/test/learning-histories', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getKanjiSkillTestLearningHistoriesGetMock()),
    );
  }),
  rest.get('*/kanji-skill/learning-histories/csv', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/kanji-skill/test/learning-histories/csv', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.post('*/kanji-skill/written/new', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getKanjiSkillWrittenNewPostMock()),
    );
  }),
  rest.get('*/dictionary/japanese/learning-histories', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getDictionaryJapaneseLearningHistoriesGetMock()),
    );
  }),
  rest.get('*/dictionary/japanese/learning-histories/csv', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/dictionary/kanji/learning-histories', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getDictionaryKanjiLearningHistoriesGetMock()),
    );
  }),
  rest.get('*/dictionary/kanji/learning-histories/csv', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/words-looked-up/ranking', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getWordsLookedUpRankingGetMock()),
    );
  }),
  rest.get('*/words-looked-up/random', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getWordsLookedUpRandomGetMock()),
    );
  }),
  rest.get('*/movie/learning-histories/csv', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/cbt/learning-histories/excel', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/cbt/categories', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCBTCbtCategoriesGetMock()),
    );
  }),
  rest.put('*/cbt/categories', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
];
